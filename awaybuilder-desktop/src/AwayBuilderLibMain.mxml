<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:components="awaybuilder.view.components.*" xmlns:desktop="awaybuilder.desktop.*"
		  preinitialize="preinitializeHandler(event)"
		  gap="0">
	<fx:Declarations>
		<fx:Array id="menuProvider">
			<fx:Object label="File">
				<fx:children>
					<fx:Array>
						<fx:Object label="New" value="{EMenuItem.NEW_DOCUMENT}" keyEquivalent="n" modifyer="1" />
						<fx:Object label="Open..." value="{EMenuItem.OPEN}" keyEquivalent="o" modifyer="1"/>
						<fx:Object label="Import..." value="{EMenuItem.IMPORT}" keyEquivalent="i" modifyer="1"/>
						<fx:Object type="separator"/> 
						<fx:Object label="Save" value="{EMenuItem.SAVE}" keyEquivalent="s" modifyer="1"/>
						<fx:Object label="Save As..." value="{EMenuItem.SAVE_AS}" keyEquivalent="S" modifyer="1"/>
						<fx:Object type="separator"/> 
						<fx:Object label="Exit" value="{EMenuItem.EXIT}" />
					</fx:Array>
				</fx:children>
			</fx:Object>
			<fx:Object label="Edit">
				<fx:children>
					<fx:Array>
						<fx:Object label="Undo" value="{EMenuItem.UNDO}" modifyer="1" keyEquivalent="z"/>
						<fx:Object label="Redo" value="{EMenuItem.REDO}" modifyer="1" keyEquivalent="y"/>
						<fx:Object type="separator"/> 
						<fx:Object label="Cut" value="{EMenuItem.CUT}" modifyer="1" keyEquivalent="x"/>
						<fx:Object label="Copy" value="{EMenuItem.COPY}" modifyer="1" keyEquivalent="c"/>
						<fx:Object label="Paste" value="{EMenuItem.PASTE}" modifyer="1" keyEquivalent="v"/>
						<fx:Object type="separator"/> 
						<fx:Object label="Delete" value="{EMenuItem.DELETE}"/>
						<fx:Object type="separator"/> 
						<fx:Object label="Select All" value="{EMenuItem.SELECT_ALL}" modifyer="1" keyEquivalent="a"/>
						<fx:Object label="Select None" value="{EMenuItem.SELECT_NONE}"/>
						<fx:Object type="separator"/> 
						<fx:Object label="Document Settings" value="{EMenuItem.DOCUMENT_SETTINGS}"/>
					</fx:Array>
				</fx:children>
			</fx:Object>
			<fx:Object label="View">
				<fx:children>
					<fx:Array>
						<fx:Object label="Zoom In" value="{EMenuItem.ZOOM_IN}" modifyer="1" keyEquivalent="+"/>
						<fx:Object label="Zoom Out" value="{EMenuItem.ZOOM_OUT}" modifyer="1" keyEquivalent="-"/>
						<fx:Object type="separator"/> 
						<fx:Object label="Focus Selected" value="{EMenuItem.FOCUS}" modifyer="1" keyEquivalent="f"/>
					</fx:Array>
				</fx:children>
			</fx:Object>
			<fx:Object label="Tools">
				<fx:children>
					<fx:Array>
						<fx:Object label="Target Camera Mode" value="{EMenuItem.TARGET_CAMERA}" type="check" toggled="{true}" modifyer="2" keyEquivalent="t"/>
						<fx:Object label="Free Camera Mode" value="{EMenuItem.FREE_CAMERA}" type="check" modifyer="2" keyEquivalent="f"/>
						<fx:Object type="separator"/> 
						<fx:Object label="Translate Transform Mode" value="{EMenuItem.TRANSLATE_MODE}" type="check" modifyer="1" keyEquivalent="t"/>
						<fx:Object label="Rotate Transform Mode" value="{EMenuItem.ROTATE_MODE}" type="check" modifyer="1" keyEquivalent="r"/>
						<fx:Object label="Scale Transform Mode" value="{EMenuItem.SCALE_MODE}" type="check" modifyer="1" keyEquivalent="s"/>
					</fx:Array>
				</fx:children>
			</fx:Object>
			<fx:Object label="Help">
				<fx:children>
					<fx:Array>
						<fx:Object label="About" value="{EMenuItem.ABOUT}"/>
					</fx:Array>
				</fx:children>
			</fx:Object>
		</fx:Array>
		
		<desktop:DesktopAppContext contextView="{this}"/>
		
	</fx:Declarations>
	
	<components:CoreEditor id="coreEditor" width="100%" height="100%"/>
	
	<fx:Script><![CDATA[
		import awaybuilder.AwayBuilder;
		import awaybuilder.utils.enumerators.EMenuItem;
		import mx.core.IVisualElement;
		import awaybuilder.view.components.editors.events.PropertyEditorEvent;
		
		import mx.events.FlexEvent;
		
		public static const DISPOSE:String = "DISPOSE";
		
		public var isMac:Boolean;
		public var menu:Object;
		public var eventDispatcher:*;
		
		private function preinitializeHandler(event:FlexEvent):void
		{
			isMac = (Capabilities.os.indexOf("Mac OS") >= 0);
		}
		
		private function keyEquivalentModifiers(item:Object):Array 
		{
			
			if( item.modifyer == "1" )
			{
				return [getCommandKey()];
			}
			else if( item.modifyer == "2" )
			{
				return [getCommandKey(),Keyboard.ALTERNATE];
			}
			return [];
		}
		
		public function openFileByURL(url:String, name:String):void
		{
			this.dispatchEvent(new PropertyEditorEvent(PropertyEditorEvent.REPLACE_AND_LOAD_TEXTURE_FROM_MOONSHINE,[url, name]));
		}
		
		public function getCommandKey():uint
		{
			if( isMac )
				return Keyboard.COMMAND;
			return Keyboard.CONTROL;
		}
		
		public function attachMenu():void
		{
			if (menu) this.addElementAt(menu as IVisualElement, 0);
		}
		
	]]></fx:Script>
</s:VGroup>